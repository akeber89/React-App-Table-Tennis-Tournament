{"version":3,"sources":["images/ping_pong.jpg","components/Header.js","components/Footer.js","components/CounterOne.js","components/CounterTwo.js","components/GenTeams.js","components/AddPlayers.js","components/FourOhFour.js","components/Figure.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Footer","url","id","CounterOne","props","state","count","increment","bind","decrement","reset","this","setState","onClick","React","Component","CounterTwo","GenTeams","namesShuffled","useState","isTeamsVisible","setIsTeamsVisible","splitNamesList","Math","floor","length","groupOne","slice","groupTwo","map","i","key","AddPlayers","userInput","names","baseState","handleChange","handleSubmit","handleShuffle","handlePairs","handleReset","e","currentTarget","value","preventDefault","array","sort","random","Fragment","htmlFor","onSubmit","placeholder","onChange","name","FourOhFour","Figure","alt","src","ping_pong","App","basename","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c83e0fb7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ping_pong.653130f7.jpg\";","import React from \"react\";\n\nconst Header = () => (\n  <header className=\"header\">\n    <h1 className=\"title\">Tournament Time!</h1>\n  </header>\n);\nexport default Header;\n","import React from \"react\";\n//import ReactDOM from \"react-dom\";\nimport { SocialIcon } from \"react-social-icons\";\n\nconst Footer = () => (\n  <footer className=\"footer\">\n    <SocialIcon className=\"social\" url=\"http://linkedin.com/in/akeberm\" />\n    <SocialIcon className=\"social\" url=\"https://codepen.io/Bexiz\" />\n    <br />\n    &copy; <span id=\"c_year\">2020</span> Created by Rebeka Meszaros\n  </footer>\n);\nexport default Footer;\n","import React from \"react\";\n\nclass CounterOne extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      count: 0,\n    };\n\n    this.increment = this.increment.bind(this);\n\n    this.decrement = this.decrement.bind(this);\n\n    this.reset = this.reset.bind(this);\n  }\n\n  reset() {\n    this.setState({\n      count: 0,\n    });\n  }\n\n  increment() {\n    this.setState((state) => ({\n      count: state.count + 1,\n    }));\n  }\n\n  decrement() {\n    this.setState((state) => ({\n      count: state.count - 1,\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"counter\">\n        <h4 className=\"teamName\">Team One Score: {this.state.count}</h4>\n        <button className=\"counterButton\" onClick={this.increment}>\n          Increment\n        </button>\n        <br />\n\n        <button className=\"counterButton\" onClick={this.decrement}>\n          Decrement\n        </button>\n        <br />\n\n        <button className=\"counterButton\" onClick={this.reset}>\n          Reset\n        </button>\n        <br />\n      </div>\n    );\n  }\n}\nexport default CounterOne;\n","import React from \"react\";\n\nclass CounterTwo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      count: 0,\n    };\n\n    this.increment = this.increment.bind(this);\n\n    this.decrement = this.decrement.bind(this);\n\n    this.reset = this.reset.bind(this);\n  }\n\n  reset() {\n    this.setState({\n      count: 0,\n    });\n  }\n\n  increment() {\n    this.setState((state) => ({\n      count: state.count + 1,\n    }));\n  }\n\n  decrement() {\n    this.setState((state) => ({\n      count: state.count - 1,\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"counter\">\n        <h4 className=\"teamName\">Team Two Score: {this.state.count}</h4>\n\n        <button className=\"counterButton\" onClick={this.increment}>\n          Increment\n        </button>\n        <br />\n\n        <button className=\"counterButton\" onClick={this.decrement}>\n          Decrement\n        </button>\n        <br />\n\n        <button className=\"counterButton\" onClick={this.reset}>\n          Reset\n        </button>\n        <br />\n      </div>\n    );\n  }\n}\nexport default CounterTwo;\n","import React, { useState } from \"react\";\n\nfunction GenTeams({ namesShuffled }) {\n  const [isTeamsVisible, setIsTeamsVisible] = useState(false);\n\n  const showTeams = () => {\n    setIsTeamsVisible(true);\n  };\n\n  const splitNamesList = Math.floor(namesShuffled.length / 2);\n  const groupOne = namesShuffled.slice(0, splitNamesList);\n  const groupTwo = namesShuffled.slice(splitNamesList, namesShuffled.length);\n\n  return (\n    <div className=\"panel\">\n      <button className=\"teamUp\" onClick={showTeams}>\n        Show Teams\n      </button>\n      {isTeamsVisible && (\n        <>\n          <p className=\"teamNumber\">Team One</p>\n          <ul>\n            {groupOne.map((groupOne, i) => (\n              <li className=\"list-group-item\" key={i}>\n                {groupOne}\n              </li>\n            ))}\n          </ul>\n\n          <p className=\"teamNumber\">Team Two</p>\n          <ul>\n            {groupTwo.map((groupTwo, i) => (\n              <li className=\"list-group-item\" key={i}>\n                {groupTwo}\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default GenTeams;\n","import React, { Component } from \"react\";\nimport GenTeams from \"./GenTeams\";\n\nclass AddPlayers extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      userInput: \"\",\n      names: [],\n      namesShuffled: [],\n      groupOne: [],\n      groupTwo: [],\n    };\n\n    this.baseState = this.state;\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleShuffle = this.handleShuffle.bind(this);\n    this.handlePairs = this.handlePairs.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  }\n\n  handleChange(e) {\n    // function updates the input value as the user types\n    let userInput = e.currentTarget.value;\n    this.setState({ userInput: userInput });\n  }\n\n  handleSubmit(e) {\n    //avoid refreshing the page and losing state by using preventDefault()\n    e.preventDefault();\n\n    this.setState({\n      // creates a replica of the object with new state\n      userInput: \"\",\n      names: [...this.state.names, this.state.userInput],\n    });\n  }\n\n  handleShuffle(array) {\n    // shuffle the array of names entered by user\n    return array.sort(() => Math.random() - 0.5);\n  }\n\n  // create a function that uses the array of shuffled names and stores it in state\n  handlePairs() {\n    const { names } = this.state;\n    this.setState({\n      namesShuffled: this.handleShuffle(names),\n    });\n  }\n\n  handleReset() {\n    // reset all date to initial value to restart the game\n    this.setState(this.baseState);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"gamepanel\">\n          <div className=\"panel\">\n            <label htmlFor=\"name\" className=\"userInput\">\n              Add an even number of players:\n            </label>\n\n            <form onSubmit={this.handleSubmit} className=\"form\">\n              <input\n                placeholder=\"Type name here\"\n                className=\"form-control\"\n                onChange={this.handleChange}\n                value={this.state.userInput}\n              />\n\n              <button className=\"add\">Add</button>\n            </form>\n\n            <ul>\n              {this.state.names.map((name, i) => (\n                <li className=\"list-group-item\" key={i}>\n                  {name}\n                </li>\n              ))}\n            </ul>\n\n            <button className=\"shuffle\" onClick={this.handlePairs}>\n              Shuffle names\n            </button>\n          </div>\n\n          <GenTeams namesShuffled={this.state.namesShuffled} />\n        </div>\n\n        <div className=\"resetContainer\">\n          <p className=\"changeTeam\">\n            You have selected your team. Would you like to pick new names?\n          </p>\n          <button className=\"resetPlayers\" onClick={this.handleReset}>\n            Reset\n          </button>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AddPlayers;\n","import React from \"react\";\n\nconst FourOhFour = () => <p className=\"fourOhFour\">Page not found</p>;\n\nexport default FourOhFour;\n","import React from \"react\";\nimport ping_pong from \"../images/ping_pong.jpg\";\n\nconst Figure = () => (\n  <figure className=\"card\">\n    <img alt=\"table tennis competition poster\" src={ping_pong} />\n    <div>\n      <figcaption className=\"card-text\">\n        Join us for an exciting competition!\n      </figcaption>\n    </div>\n  </figure>\n);\n\nexport default Figure;\n","import React from \"react\";\n\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport CounterOne from \"./components/CounterOne\";\nimport CounterTwo from \"./components/CounterTwo\";\nimport AddPlayers from \"./components/AddPlayers\";\nimport FourOhFour from \"./components/FourOhFour\";\nimport Figure from \"./components/Figure\";\n\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <>\n        <Header /> {/* will always render */}\n        <Switch>\n          <Route exact path=\"/\">\n            <Figure />\n            <AddPlayers />\n            <div className=\"counters\">\n              <CounterOne />\n              <CounterTwo />\n            </div>\n          </Route>\n\n          <FourOhFour />\n        </Switch>\n        <Footer /> {/* will always render */}\n      </>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Fragment } from \"react\";\n\nReactDOM.render(\n  <Fragment>\n    \n      <App />\n    \n  </Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}